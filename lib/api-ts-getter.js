"use strict";
/**
 * these helper functions and definitions are based off the structure of DestinyManifest
 * in the bungie.net API spec, but are not explicity defined endpoints in the spec.
 *
 * they were last hand-checked for OpenAPI spec version 2.8.0,
 * and have been automatically tested for the latest OpenAPI spec version 2.8.0.
 * please let us know at the belog repo, if there's any typing issues with them.
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bungie-api-ts
 * Do not edit these files manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/** fetches the enormous combined JSON manifest file */
function getAllDestinyManifestComponents(http, params) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net' + params.destinyManifest.jsonWorldContentPaths[params.language],
    });
}
exports.getAllDestinyManifestComponents = getAllDestinyManifestComponents;
/**
 * this fetches and returns a single table (Component) from the d2 manifest
 * i.e. DestinyInventoryItemDefinition / DestinyObjectiveDefinition /
 * DestinyVendorDefinition / DestinySeasonDefinition / etc.
 *
 * due to... LIMITATIONS, the array of table names needs to be recognized by
 * typescript as readonly (not mutable between inception and fetching),
 * so that it considers them table names and not just strings.
 * like ['DestinyInventoryItemDefinition' as const]
 * or maybe ['DestinyInventoryItemDefinition'] as const
 * or just hard coded like
 * function(['DestinyInventoryItemDefinition'])
 */
function getDestinyManifestComponent(http, params) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net' +
            params.destinyManifest.jsonWorldComponentContentPaths[params.language][params.tableName],
    });
}
exports.getDestinyManifestComponent = getDestinyManifestComponent;
/**
 * this returns a similar structure to getAllDestinyManifestComponents (the big manifest json)
 * but only specific components within. it bundles multiple single tables requests,
 * into a single properly typed object with keys named after manifest components
 * i.e. { DestinyInventoryItemDefinition: etc..., DestinyObjectiveDefinition: etc... }
 */
function getDestinyManifestSlice(http, params) {
    return __awaiter(this, void 0, void 0, function () {
        var downloadedTables;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all(params.tableNames.map(function (tableName) { return __awaiter(_this, void 0, void 0, function () {
                        var tableContent;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, getDestinyManifestComponent(http, {
                                        destinyManifest: params.destinyManifest,
                                        tableName: tableName,
                                        language: params.language,
                                    })];
                                case 1:
                                    tableContent = _a.sent();
                                    return [2 /*return*/, { tableName: tableName, tableContent: tableContent }];
                            }
                        });
                    }); }))];
                case 1:
                    downloadedTables = _a.sent();
                    return [2 /*return*/, downloadedTables.reduce(function (acc, _a) {
                            var _b;
                            var tableName = _a.tableName, tableContent = _a.tableContent;
                            return Object.assign(acc, (_b = {}, _b[tableName] = tableContent, _b));
                        }, {})];
            }
        });
    });
}
exports.getDestinyManifestSlice = getDestinyManifestSlice;
